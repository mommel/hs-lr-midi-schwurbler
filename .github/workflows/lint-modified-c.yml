---
name: code-linting
on:
  pull_request:
    paths:
      - 'code/**'
      - '!code/docs/**'
    branches:
      - master
      - 'develop/**'
jobs:
  lint-changed-files:
    name: Lint Code
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2

      - name: Install Linter
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: x64
      - run: python -m pip install cpplint
      - run: git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
      - name: Creating File Delta
        run: git diff origin/$GITHUB_REF --name-only > git_diff.txt
      - name: Linting Files
        shell: python
        run: |
          import os
          import re
          import subprocess
          import sys
          print("Python {}.{}.{}".format(*sys.version_info))  # Python 3.8
          with open("git_diff.txt") as in_file:
            modified_files = sorted(in_file.read().splitlines())
          print("{} files were modified.".format(len(modified_files)))
          cpp_exts = tuple(".c .c++ .cc .cpp .cu .cuh .cxx .h .h++ .hh .hpp .hxx".split())
          cpp_files = [file for file in modified_files if file.lower().endswith(cpp_exts)]
          print(f"{len(cpp_files)} C++ files were modified.")
          if not cpp_files:
            sys.exit(0)
          regex_rootdir = r"^/?code/[^/\s\r\n]*/"
          rootdir_list = []
          for filename in cpp_files:
            rootdir_extract = re.finditer(regex, filename, re.MULTILINE)
            if rootdir_extract and not rootdir in rootdir_list:
              rootdir_list.append(rootdir_extract)
          for rootdir in rootdir_list:
            files_in_rootlist = []
            for file in cpp_files:
              file.startswith( rootdir )
              files_in_rootlist.append(file)
            print("cpplint: runs on rootdir " + rootdir)
            subprocess.run(["cpplint.py ",  "--root=" + rootdir + " --filter=-legal/copyright,-build/" ] + files_in_rootlist, check=True, text=True)
            print("g++:")
            subprocess.run(["g++"] + files_in_rootlist, check=True, text=True)
